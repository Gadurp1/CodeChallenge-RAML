FORMAT: 1A
HOST: http://private-d9e5b-oracodechallenge.apiary-mock.com/

# Code Challenge API
      
Documentation for Ora's Code Challenge API Service
      
__Version 4.0 - Compiled by Andre Sugai__
      
Questions or comments? Email [andre@orainteractive.com](mailto:andre@orainteractive.com)

## The Challenge

The API describes a simple chat application.

A user can: 
- register
- login
- view their profile
- edit their profile
- list all chats
- create a chat
- view all messages in a chat
- create a message in a chat

__How much or how little development time you spend on the code challenge is up to you - we are simply looking for something that exemplifies your work.__

## Submission

### Versioning System
At Ora, we use [Github](http://github.com) for all of our code versioning. We would like you to deliver a well constructed github repository where we can find your work.

We will be looking to review how you setup your commits as well as issues (if applicable).

#### Note

All submissions should be accompanied by any necessary compilation or deployment instructions in a README file in the repository.

## Requirements

### For front-end developers: iOS / Android / Angular
Your challenge is to build a small application following best practices that interacts with the API specified in this document.

A sample UX design can be found here: [UX and Sketch file](https://github.com/OraInteractive/CodeChallenge-RAML/tree/master/UX)

A mock API is provided here: [Mock API](http://private-d9e5b-oracodechallenge.apiary-mock.com/)

- For iOS applicants, please use Objective C or Swift (2 or 3)
- For Android applications, please use Java.
- For Angular applications, please use Angular 1 or 2.

### For full-stack developers: PHP / C#&nbsp;
Your challenge is to build the API specified in this document using the following your choice of the following language and framework:

- PHP: [Laraval](http://laravel.com/)
- C#: [Entity Framework](https://msdn.microsoft.com/en-us/data/ef.aspx?f=255&MSPPError=-2147217396)

## Time limit

Your time limit is 5 days after the you receive this challenge.

If you need more time, please email [andre@orainteractive.com](mailto:andre@orainteractive.com) to let us know.

## Standards

Use best practices for coding style, unit testing, etc.

We recommend:
- Objective C - [Programming with Objective-C Conventions](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html)
- Android - [Android Code Style Guidelines](https://source.android.com/source/code-style.html)
- Angular - [Angular Style Guide](https://angular.io/docs/ts/latest/guide/style-guide.html)
- PHP - [PHP-FIG](http://www.php-fig.org/)
- Ruby on Rails - [Rails](https://github.com/bbatsov/rails-style-guide), [Ruby](https://github.com/bbatsov/ruby-style-guide)
- C# - [C# Coding Conventions](https://msdn.microsoft.com/en-us/library/ff926074.aspx)

## Packages, Plugins, and Reusable Code

Use packages, gems, plugins, cocoapods, etc. as needed.

Any plugin used should also follow stardards and best practices.

# Group Endpoints

## User [/user]

+ Model (application/json; charset=utf-8)
    
        {
            "success": true,
            "data": {
                "id": 1,
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w",
                "email": "andre@orainteractive.com",
                "name": "Andre"
            }
        }

### Register [POST /users/register]
+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            
    + Body
    
            { 
                "name": "Andre",
                "email": "andre@orainteractive.com",
                "password": "test123",
                "confirm": "test123"
            }
            
+ Response 201
    [User][]
        
            
### Login [POST /users/login]
+ Request (application/json; charset=utf-8)

    + Headers

            Accept: application/json
            
    + Body
    
            {
                "email": "andre@orainteractive.com",
                "password": "test123"
            }

+ Response 200
    [User][]

### View [GET /users/me]
+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w

+ Response 200
    [User][]

### Edit [PUT /users/me]
+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w
    
    + Body

            {
                "name": "Andre",
                "email": "andre@orainteractive.com",
                "password": "",
                "confirm": ""
            }

+ Response 201

    [User][]

# Chat [/chats]

### List [GET /chats?q={q}&page={page}&limit={limit}]

+ Parameters
    + q: `Chat` (string, optional) - a search query for the name
    + page: `1` (string, optional) - page of list
    + limit: `20` (number, optional) - limit per page
    
+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "data": [
                {
                    "id": 1,
                    "user_id": 1,
                    "name": "A Chat",
                    "created": "2016-07-12T04:30:21Z",
                    "user": {
                        "id": 1,
                        "name": "Andre"
                    },
                    "last_message": {
                        "id": 2,
                        "user_id": 2,
                        "chat_id": 1,
                        "message": "Oh hey!",
                        "created": "2016-07-16T06:30:21Z",
                        "user": {
                            "id": 2,
                            "name": "Dan"
                        }
                    }
                },
                {
                    "id": 2,
                    "user_id": 1,
                    "name": "A Chat 2",
                    "created": "2016-07-14T12:30:21Z",
                    "user": {
                        "id": 2,
                        "name": "Dan"
                    },
                    "last_message": {
                        "id": 4,
                        "user_id": 1,
                        "chat_id": 2,
                        "message": "Oh man!",
                        "created": "2016-07-14T09:30:21Z",
                        "user": {
                            "id": 1,
                            "name": "Andre"
                        }
                    }
                }
            ],
            "pagination": {
                "page_count": 1,
                "current_page": 1,
                "has_next_page": false,
                "has_prev_page": false,
                "count": 1,
                "limit": null
            }
        }

### Create [POST]
+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w
            
    + Body
    
            { 
                "name": "A Chat"
            }

+ Response 201 (application/json; charset=utf-8)

        {
            "success": true,
            "data": {
                "id": 1,
                "user_id": 1,
                "name": "A Chat",
                "created": "2016-07-12T04:30:21Z",
                "user": {
                    "id": 1,
                    "name": "Andre"
                },
                "last_message": null
            }
        }
        
# Messages [/chats/{chat_id}/messages]


### List [GET /chats/{chat_id}/messages?page={page}&limit={limit}]

+ Parameters
    + chat_id: `1` (required, number) - Numeric `id` of the Note to perform action with. Has example value.
    + page: `1` (string, optional) - page of list
    + limit: `20` (number, optional) - limit per page

+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w
            

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "data": [
                {
                    "id": 2,
                    "chat_id": 1,
                    "user_id": 2,
                    "message": "Oh hey!",
                    "created": "2016-07-12T06:30:21Z",
                    "user": {
                        "id": 2,
                        "name": "Dan"
                    }
                },
                {
                    "id": 1,
                    "chat_id": 1,
                    "user_id": 1,
                    "message": "Hey there!",
                    "created": "2016-07-12T04:32:21Z",
                    "user": {
                        "id": 1,
                        "name": "Andre"
                    }
                }
            ],
            "pagination": {
                "page_count": 1,
                "current_page": 1,
                "has_next_page": false,
                "has_prev_page": false,
                "count": 2,
                "limit": null
            }
        }

### Create [POST]

+ Parameters
    + chat_id: `1` (required, number) - Numeric `id` of the Note to perform action with. Has example value.

+ Request (application/json; charset=utf-8)
    
    + Headers

            Accept: application/json
            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w
            
    + Body
    
            { 
                "message": "Hey there!"
            }

+ Response 201 (application/json; charset=utf-8)

        {
            "success": true,
            "data": {
                "id": 1,
                "chat_id": 1,
                "user_id": 1,
                "message": "Hey there!",
                "created": "2016-07-12T04:30:21Z",
                "user": {
                    "id": 1,
                    "name": "Andre"
                }
            }
        }