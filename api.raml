#%RAML 0.8
baseUri: http://raml.orainteractive.com:8081
title: CodeChallenge
version: v1
mediaType: application/json
/users:
  description: |
    - POST: Register
  type: 
    collection:
      example-collection: |
      example-member: &user |
        {
          "success": true,
          "data": {
            "id": 1,
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w",
            "email": "andre@orainteractive.com"
          }
        }
  post:
    is: [ json ]
    body:
      application/x-www-form-urlencoded:
        formParameters:
          email:
            type: string
            example: andre@orainteractive.com
            required: true
          password:
            type: string
            example: Test123
            required: true
    responses:
      200:
        body:
          application/json:
            example: *user
  /login:
    description: |
      - POST: Login
    post:
      is: [ json ]
      description: Login endpoint
      body:
        application/x-www-form-urlencoded:
          formParameters:
            email:
              type: string
              example: andre@orainteractive.com
              required: true
            password:
              type: string
              example: Test123
              required: true
      responses:
        200:
          body:
            application/json:
              example: *user
        412:
          description:
            Precondition failed - Often missing a required parameter.
          body:
            application/json:
              schema: error
              example: |
                {
                  "error": {
                    "code": "412",
                    "url": "/api/users.json",
                    "message": "Please enter an email." 
                  }
                }
        401:
          description:
            Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            Possible Facebook access token error.
          body:
            application/json:
              example: |
                {
                  "error": {
                    "code": "401",
                    "url": "/api/users.json",
                    "message": "You do not have access to this endpoint."
                  }
                }
  /_current:
    description: |
      - GET: Profile view
      - POST: Profile edit
    type:
      member:
        example-member: *user
    get:
      is: [ secured, json ]
    put:
      is: [ secured, json ]
      body:
        application/x-www-form-urlencoded:
          formParameters:
            email:
              type: string
              example: andre@orainteractive.com
              required: true
            password:
              type: string
              example: Test123
              required: true
      responses:
        200:
          body:
            application/json:
              example: *user
/chats:
  description: |
    - GET: Chat list
    - POST: Chat create
  type: 
    collection:
      example-collection: &chats |
        {
          "success": true,
          "data": [
            {
              "id": 1,
              "user_id": 1,
              "name": "A Chat"
            }
          ],
          "pagination": {
            "page_count": 1,
            "current_page": 1,
            "has_next_page": false,
            "has_prev_page": false,
            "count": 1,
            "limit": null
          }
        }
      example-member: &chat |
        {
          "success": true,
          "data": {
            "id": 1,
            "user_id": 1,
            "name": "A Chat"
          }
        }
  get:
    is: [ secured, json, paged ]
    responses:
      200:
        body:
          application/json:
            example: *chats
  post:
    is: [ secured, json ]
    body:
      application/x-www-form-urlencoded:
        formParameters:
          name:
            type: string
            example: A Chat
            required: true
    responses:
      200:
        body:
          application/json:
            example: *chat
  /{chat_id}/messages:
    description: |
      - GET: Chat Messages view
      - POST: Chat Message create
    type: 
      collection:
        example-collection: &messages |
          {
            "success": true,
            "data": [
              {
                "id": 1,
                "chat_id": 1,
                "user_id": 1,
                "message": "Hey there!",
                "user": {
                  "id": 1,
                  "name": "Andre Sugai"
                }
              },
              {
                "id": 2,
                "chat_id": 1,
                "user_id": 2,
                "message": "Oh hey!",
                "user": {
                  "id": 2,
                  "name": "Dan Parsons"
                }
              }
            ],
            "pagination": {
              "page_count": 1,
              "current_page": 1,
              "has_next_page": false,
              "has_prev_page": false,
              "count": 1,
              "limit": null
            }
          }
        example-member: |
    get:
      is: [ secured, json, paged ]
      responses:
        200:
          body:
            application/json:
              example: *messages
    post:
      description: |
        Post a new message to a chat
      is: [ secured, json ]
      body:
        application/x-www-form-urlencoded:
          formParameters:
            message:
              type: string
              example: Hey there!
              required: true
traits:
  - paged:
      queryParameters:
        page:
          description: Which page to return
          type: integer
          required: false
          example: 20
          default: 1
        limit:
          description: Limit the number of elements on the response
          type: integer
          required: false
          example: 80
          default: 10
  - secured:
      headers:
        Authorization:
          description: |
            A valid JWT token is required
          example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w
          required: true
  - json:
      headers:
        Accept:
          description: |
            Return type for data encoding
          example: application/json
          required: true
resourceTypes:
  - base:
      is: []
  - collection:
      type: base
      get?:
        is: [ paged ]
        description: Get a list of <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-collection>>
      post?:
        description: Create/add a new <<resourcePathName | !singularize>>
        responses:
          201:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-member>> 
          412:
            description:
              Precondition failed - Often missing a required parameter.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "412",
                      "url": "/api/users.json",
                      "message": "Please enter an email." 
                    }
                  }
  - member:
      type: base
      options?:
        responses:
          200:
      get?:
        description: Get a specific <<resourcePathName | !singularize>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-member>> 
          401:
            description:
              Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "401",
                      "url": "/api/users.json",
                      "message": "You do not have access to this endpoint."
                    }
                  }
          404:
            description:
              Not Found - <<resourcePathName | !singularize>> not found
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "404",
                      "url": "/api/users.json",
                      "message": "<<resourcePathName | !singularize>> not found." 
                    }
                  }
      put?:
        description: Update the specific <<resourcePathName | !singularize>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-member>> 
          412:
            description:
              Precondition failed - Often missing a required parameter.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "412",
                      "url": "/api/users.json",
                      "message": "Please enter an email." 
                    }
                  }
          401:
            description:
              Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "401",
                      "url": "/api/users.json",
                      "message": "You do not have access to this endpoint."
                    }
                  }
      delete?:
        description: Remove/cancel the specific <<resourcePathName | !singularize>>
        responses:
          204:
          401:
            description:
              Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "401",
                      "url": "/api/users.json",
                      "message": "You do not have access to this endpoint."
                    }
                  }
documentation:
  - title: Introduction
    content: |
      ###Code Challenge-RAML
      
      RAML documentation for Ora's Code Challenge API Service
      
      Version 2.0
      Compiled by Andre Sugai
      
      This API documentation is written in RAML and was produced for the benefit of the Ora Code Challenge participants
  - title: The Challenge
    content: |
      ###Description
      The API describes a simple chat application.
      
      A user can: 
      - register
      - login
      - view their profile
      - edit their profile
      - list all chats
      - create a chat
      - view all messages in a chat
      - create a message in a chat
      
      How much or how little development time you spend on the code challenge is up to you - we are simply looking for something that exemplifies your work.
  - title: iOS and Android
    content: |
      Your challenge is to build a small application following best practices that interacts with the API specified in the RAML file.
      
      A mock API can be found here: 
      http://raml.orainteractive.com:8081
      
      ###UI
      
      Please use 
      
      ###Note
      
      All submissions should be accompanied by any necessary compilation instructions.
  - title: PHP
    content: |
      Your challenge is to build the API specified in the RAML file using PHP in the framework of your choice.
      
      We recommend:
      - [CakePHP](cakephp.org)
      - [Laraval](http://laravel.com/)
      
      ###Note
      
      All submissions should be accompanied by any necessary deployment instructions.
      
  - title: Time limit
    content: |
      Your time limit is 5 days after the you receive this challenge.
      
      If you need more time, please email andre@orainteractive.com to let us know.
      
  - title: Standards
    content: |
      Use best practices for coding style, unit testing, etc.
      
      We recommend:
      - PHP - [PHP-FIG](http://www.php-fig.org/)
      - Objective C - [Programming with Objective-C Conventions](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html)
      - Android - [Android Code Style Guidelines](https://source.android.com/source/code-style.html)
      
  - title: Packages, Plugins, and Reusable Code
    content: |
      Use packages, plugins, cocoapods, etc. as needed.
      
      Any plugin used should also follow stardards.
