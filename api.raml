#%RAML 0.8
baseUri: http://raml.orainteractive.com:8081
title: CodeChallenge
version: v2
mediaType: application/json
/users:
  type: 
    collection:
      example-collection: |
      example-member: &user |
        {
          "success": true,
          "data": {
            "id": 1,
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w",
            "email": "andre@orainteractive.com",
            "name": "andre"
          }
        }
  post:
    is: [ json ]
    description: Registration endpoint
    body:
      application/x-www-form-urlencoded:
        formParameters:
          email:
            type: string
            example: andre@orainteractive.com
            required: true
          name:
            type: string
            example: andre
            required: true
          password:
            type: string
            example: Test123
            required: true
    responses:
      200:
        body:
          application/json:
            example: *user
  /login:
    post:
      is: [ json ]
      description: Login endpoint
      body:
        application/x-www-form-urlencoded:
          formParameters:
            email:
              type: string
              example: andre@orainteractive.com
              required: true
            password:
              type: string
              example: Test123
              required: true
      responses:
        200:
          body:
            application/json:
              example: *user
        412:
          description:
            Precondition failed - Often missing a required parameter.
          body:
            application/json:
              schema: error
              example: |
                {
                  "error": {
                    "code": "412",
                    "url": "/api/users.json",
                    "message": "Please enter an email." 
                  }
                }
        401:
          description:
            Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            Possible Facebook access token error.
          body:
            application/json:
              example: |
                {
                  "error": {
                    "code": "401",
                    "url": "/api/users.json",
                    "message": "You do not have access to this endpoint."
                  }
                }
  /_current:
    type:
      member:
        example-member: *user
    get:
      is: [ secured, json ]
      description: Profile view endpoint
    put:
      is: [ secured, json ]
      description: Profile edit endpoint
      body:
        application/x-www-form-urlencoded:
          formParameters:
            email:
              type: string
              example: andre@orainteractive.com
            name:
              type: string
              example: andre
            password:
              type: string
              example: Test123
      responses:
        200:
          body:
            application/json:
              example: *user
/chats:
  type: 
    collection:
      example-collection: &chats |
        {
          "success": true,
          "data": [
            {
              "id": 1,
              "user_id": 1,
              "name": "A Chat"
            }
          ],
          "pagination": {
            "page_count": 1,
            "current_page": 1,
            "has_next_page": false,
            "has_prev_page": false,
            "count": 1,
            "limit": null
          }
        }
      example-member: &chat |
        {
          "success": true,
          "data": {
            "id": 1,
            "user_id": 1,
            "name": "A Chat"
          }
        }
  get:
    is: [ secured, json, paged ]
    description: Chat list endpoint
    responses:
      200:
        body:
          application/json:
            example: *chats
  post:
    is: [ secured, json ]
    description: Chat create endpoint
    body:
      application/x-www-form-urlencoded:
        formParameters:
          name:
            type: string
            example: A Chat
            required: true
    responses:
      200:
        body:
          application/json:
            example: *chat
  /{chat_id}/messages:
    type: 
      collection:
        example-collection: &messages |
          {
            "success": true,
            "data": [
              {
                "id": 1,
                "chat_id": 1,
                "user_id": 1,
                "message": "Hey there!",
                "user": {
                  "id": 1,
                  "name": "andre"
                }
              },
              {
                "id": 2,
                "chat_id": 1,
                "user_id": 2,
                "message": "Oh hey!",
                "user": {
                  "id": 2,
                  "name": "dan"
                }
              }
            ],
            "pagination": {
              "page_count": 1,
              "current_page": 1,
              "has_next_page": false,
              "has_prev_page": false,
              "count": 2,
              "limit": null
            }
          }
        example-member: &message |
          {
            "success": true,
            "data": {
              "id": 1,
              "chat_id": 1,
              "user_id": 1,
              "message": "Hey there!",
              "user": {
                "id": 1,
                "name": "andre"
              }
            }
          }
    get:
      is: [ secured, json, paged ]
      description: Messages list endpoint
      responses:
        200:
          body:
            application/json:
              example: *messages
    post:
      is: [ secured, json ]
      description: Message create endpoint
      body:
        application/x-www-form-urlencoded:
          formParameters:
            message:
              type: string
              example: Hey there!
              required: true
      responses:
        200:
          body:
            application/json:
              example: *message
traits:
  - paged:
      queryParameters:
        page:
          description: Which page to return
          type: integer
          required: false
          example: 20
          default: 1
        limit:
          description: Limit the number of elements on the response
          type: integer
          required: false
          example: 80
          default: 10
  - secured:
      headers:
        Authorization:
          description: |
            A valid JWT token is required
          example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNDM0NDY3NDUxfQ.Or5WanRwK1WRqqf4oeIkAHRYgNyRssM3CCplZobxr4w
          required: true
  - json:
      headers:
        Accept:
          description: |
            Return type for data encoding
          example: application/json
          required: true
resourceTypes:
  - base:
      is: []
  - collection:
      type: base
      get?:
        is: [ paged ]
        description: Get a list of <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-collection>>
      post?:
        description: Create/add a new <<resourcePathName | !singularize>>
        responses:
          201:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-member>> 
          412:
            description:
              Precondition failed - Often missing a required parameter.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "412",
                      "url": "/api/users.json",
                      "message": "Please enter an email." 
                    }
                  }
  - member:
      type: base
      options?:
        responses:
          200:
      get?:
        description: Get a specific <<resourcePathName | !singularize>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-member>> 
          401:
            description:
              Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "401",
                      "url": "/api/users.json",
                      "message": "You do not have access to this endpoint."
                    }
                  }
          404:
            description:
              Not Found - <<resourcePathName | !singularize>> not found
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "404",
                      "url": "/api/users.json",
                      "message": "<<resourcePathName | !singularize>> not found." 
                    }
                  }
      put?:
        description: Update the specific <<resourcePathName | !singularize>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName | !singularize>>
                example: <<example-member>> 
          412:
            description:
              Precondition failed - Often missing a required parameter.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "412",
                      "url": "/api/users.json",
                      "message": "Please enter an email." 
                    }
                  }
          401:
            description:
              Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "401",
                      "url": "/api/users.json",
                      "message": "You do not have access to this endpoint."
                    }
                  }
      delete?:
        description: Remove/cancel the specific <<resourcePathName | !singularize>>
        responses:
          204:
          401:
            description:
              Unauthorized - Authentication credentials were missing, incorrect, or insufficient.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "error": {
                      "code": "401",
                      "url": "/api/users.json",
                      "message": "You do not have access to this endpoint."
                    }
                  }
documentation:
  - title: 1. Introduction
    content: |
      ####Code Challenge-RAML
      
      RAML documentation for Ora's Code Challenge API Service
      
      __Version 2.1 - Compiled by Andre Sugai__
      
      Questions or comments? Email [andre@orainteractive.com](mailto:andre@orainteractive.com)
  - title: 2. The Challenge
    content: |
      ####Description
      The API describes a simple chat application.
      
      A user can: 
      - register
      - login
      - view their profile
      - edit their profile
      - list all chats
      - create a chat
      - view all messages in a chat
      - create a message in a chat
      
      How much or how little development time you spend on the code challenge is up to you - we are simply looking for something that exemplifies your work.
  - title: 3. Submission
    content: |
      ####Versioning system
      At Ora, we use [Github](http://github.com) for all of our code versioning. We would like you to deliver a well constructed github repository where we can find your work.
      
      We will be looking to review how you setup your commits as well as issues (if applicable).
      
      #####Note
      
      All submissions should be accompanied by any necessary compilation or deployment instructions in a README file in the repository.
  - title: 4. Requirements
    content: |
      ####iOS and Android
      Your challenge is to build a small application following best practices that interacts with the API specified in the RAML file.
      
      A mock API can be found here:  ``http://raml.orainteractive.com:8081``
      
      UX for app:
      - [Android](https://www.dropbox.com/s/7bnxed58z4cb4kg/InstaChat.zip?dl=0)
      - iOS coming soon - use Android in the meantime as basis
        
      ####PHP and Ruby on Rails
      Your challenge is to build the API specified in the RAML file using a PHP framework or Ruby on Rails.
      
      We recommend these frameworks for PHP:
      - [CakePHP](cakephp.org)
      - [Laraval](http://laravel.com/)

      For Ruby, you should use Rails.
  - title: 5. Time limit
    content: |
      Your time limit is 5 days after the you receive this challenge.
      
      If you need more time, please email [andre@orainteractive.com](mailto:andre@orainteractive.com) to let us know.
      
  - title: 6. Standards
    content: |
      Use best practices for coding style, unit testing, etc.
      
      We recommend:
      - Objective C - [Programming with Objective-C Conventions](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html)
      - Android - [Android Code Style Guidelines](https://source.android.com/source/code-style.html)
      - PHP - [PHP-FIG](http://www.php-fig.org/)
      - Ruby on Rails - [Rails](https://github.com/bbatsov/rails-style-guide), [Ruby](https://github.com/bbatsov/ruby-style-guide)
      
  - title: 7. Packages, Plugins, and Reusable Code
    content: |
      Use packages, gems, plugins, cocoapods, etc. as needed.
      
      Any plugin used should also follow stardards and best practices.